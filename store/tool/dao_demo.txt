func (*${i}) CheckOID(id string) (_id primitive.ObjectID, c int, m string, b bool) {
var e error
_id, e = primitive.ObjectIDFromHex(id)
if e != nil {
c, m, b = 1103, \"ID格式非法\", false
} else {
b = true
if total, _ := dataC.${i}.CountDocuments(context.Background(), bson.M{\"_id\": _id}); total != 1 {
c, m, b = 1104, \"ID不存在\", false
}
}
return
}
func (*${i}) Update(ctx context.Context, filter, update interface{}) (e error) {
if filter == nil {filter = bson.M{}}
if update == nil {update = bson.M{}}
_, e = dataC.${i}.UpdateMany(ctx, filter, update)
return
}
func (*${i}) Add(ctx context.Context, data interface{}) (e error) {
if data != nil {
_, e = dataC.${i}.InsertOne(ctx, data)
}
return
}
func (*${i}) Del(ctx context.Context, filter interface{}) (e error) {
if filter == nil {filter = bson.M{}}
_, e = dataC.${i}.DeleteMany(ctx, filter)
return
}
func (*${i}) Len(filter interface{}) (total int64) {
if filter == nil {filter = bson.M{}}
total, _ = dataC.${i}.CountDocuments(context.Background(), filter)
return
}
func (*${i}) Get(filter interface{}, opts ...*options.FindOneOptions) (op ${i}, e error) {
e = dataC.${i}.FindOne(context.Background(), filter, opts...).Decode(&op)
return
}
func (*${i}) GetList(limit, page int,
match, sort, project interface{}, lookups ...store.AggregateLookup) (op []${i}, total int64, e error) {
if limit == -1 {limit = 1<<63 - 1}
if match == nil {match = bson.M{}}
if sort == nil {sort = bson.M{\"_id\": -1}}
pipeline := mongo.Pipeline{
{{Key: \"\$match\", Value: match}},
{{Key: \"\$sort\", Value: sort}},
{{Key: \"\$skip\", Value: limit * (page - 1)}},
{{Key: \"\$limit\", Value: limit}},
}
if project != nil {
pipeline = append(pipeline, mongo.Pipeline{
{{Key: \"\$project\", Value: project}},
}...)
}
for _, al := range lookups {
pipeline = append(pipeline, mongo.Pipeline{
{{Key: \"\$lookup\", Value: bson.M{
\"from\": al.From,
\"let\":  bson.M{\"id\": \"\$\" + al.LocalField},
\"pipeline\": mongo.Pipeline{
{{Key: \"\$match\", Value: bson.M{\"\$expr\": bson.M{\"\$eq\": []string{\"\$\" + al.ForeignField, \"\$\$id\"}}}}},
{{Key: \"\$project\", Value: al.Project}},
},
\"as\": al.As,
}}},
}...)
}
var ctx = context.Background()
var cur *mongo.Cursor
cur, e = dataC.${i}.Aggregate(ctx, pipeline)
if e == nil {
defer cur.Close(ctx)
if e = cur.All(ctx, &op); e != nil {
return
}
}
total, e = dataC.${i}.CountDocuments(ctx, match)
return
}
